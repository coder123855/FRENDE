#!/bin/bash

# Environment Manager for Frende application
# This script manages environment-specific configurations and deployments

set -e

# Configuration
ENVIRONMENTS=("development" "staging" "production")
DEFAULT_ENVIRONMENT="development"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_debug() {
    echo -e "${BLUE}[DEBUG]${NC} $1"
}

# Validate environment
validate_environment() {
    local env="$1"
    
    for valid_env in "${ENVIRONMENTS[@]}"; do
        if [ "$env" = "$valid_env" ]; then
            return 0
        fi
    done
    
    log_error "Invalid environment: $env"
    log_info "Valid environments: ${ENVIRONMENTS[*]}"
    return 1
}

# Get environment configuration
get_env_config() {
    local env="$1"
    
    case "$env" in
        "development")
            echo "FRONTEND_URL=http://localhost:5173"
            echo "BACKEND_URL=http://localhost:8000"
            echo "DATABASE_URL=postgresql://user:pass@localhost:5432/frende_dev"
            echo "SENTRY_DSN="
            echo "ENVIRONMENT=development"
            ;;
        "staging")
            echo "FRONTEND_URL=https://staging.frende.app"
            echo "BACKEND_URL=https://api-staging.frende.app"
            echo "DATABASE_URL=postgresql://user:pass@staging-db.frende.app/frende_staging"
            echo "SENTRY_DSN=https://staging-dsn@sentry.io/project-id"
            echo "ENVIRONMENT=staging"
            ;;
        "production")
            echo "FRONTEND_URL=https://frende.app"
            echo "BACKEND_URL=https://api.frende.app"
            echo "DATABASE_URL=postgresql://user:pass@prod-db.frende.app/frende_prod"
            echo "SENTRY_DSN=https://prod-dsn@sentry.io/project-id"
            echo "ENVIRONMENT=production"
            ;;
        *)
            log_error "Unknown environment: $env"
            return 1
            ;;
    esac
}

# Generate environment files
generate_env_files() {
    local env="$1"
    local config
    
    log_info "Generating environment files for $env..."
    
    config=$(get_env_config "$env")
    
    # Generate backend .env file
    cat > "FRENDE/backend/.env.$env" << EOF
# Generated by environment-manager.sh for $env environment
# Do not edit manually - changes will be overwritten

$(echo "$config" | grep -E "(BACKEND_URL|DATABASE_URL|SENTRY_DSN|ENVIRONMENT)")
EOF
    
    # Generate frontend .env file
    cat > "FRENDE/frontend/.env.$env" << EOF
# Generated by environment-manager.sh for $env environment
# Do not edit manually - changes will be overwritten

VITE_API_URL=$(echo "$config" | grep BACKEND_URL | cut -d'=' -f2)
VITE_WS_URL=$(echo "$config" | grep BACKEND_URL | cut -d'=' -f2 | sed 's/https:/wss:/')
VITE_SENTRY_DSN=$(echo "$config" | grep SENTRY_DSN | cut -d'=' -f2)
VITE_ENVIRONMENT=$(echo "$config" | grep ENVIRONMENT | cut -d'=' -f2)
EOF
    
    log_info "Environment files generated successfully"
}

# Validate environment files
validate_env_files() {
    local env="$1"
    local errors=0
    
    log_info "Validating environment files for $env..."
    
    # Check if files exist
    if [ ! -f "FRENDE/backend/.env.$env" ]; then
        log_error "Backend environment file missing: FRENDE/backend/.env.$env"
        errors=$((errors + 1))
    fi
    
    if [ ! -f "FRENDE/frontend/.env.$env" ]; then
        log_error "Frontend environment file missing: FRENDE/frontend/.env.$env"
        errors=$((errors + 1))
    fi
    
    # Check for required variables
    if [ -f "FRENDE/backend/.env.$env" ]; then
        if ! grep -q "DATABASE_URL" "FRENDE/backend/.env.$env"; then
            log_error "DATABASE_URL missing in backend environment file"
            errors=$((errors + 1))
        fi
    fi
    
    if [ -f "FRENDE/frontend/.env.$env" ]; then
        if ! grep -q "VITE_API_URL" "FRENDE/frontend/.env.$env"; then
            log_error "VITE_API_URL missing in frontend environment file"
            errors=$((errors + 1))
        fi
    fi
    
    if [ $errors -eq 0 ]; then
        log_info "Environment files validation passed"
    else
        log_error "Environment files validation failed with $errors errors"
        return 1
    fi
}

# Deploy to environment
deploy_to_environment() {
    local env="$1"
    
    log_info "Deploying to $env environment..."
    
    case "$env" in
        "development")
            log_info "Development deployment - starting local services..."
            # Start local development servers
            cd FRENDE/backend && python -m uvicorn main:app --reload --host 0.0.0.0 --port 8000 &
            cd ../frontend && npm run dev &
            ;;
        "staging"|"production")
            log_info "Triggering $env deployment via GitHub Actions..."
            # Trigger GitHub Actions deployment
            gh workflow run "deploy-$env.yml" --ref main
            ;;
        *)
            log_error "Unknown deployment target: $env"
            return 1
            ;;
    esac
}

# Show environment status
show_environment_status() {
    local env="$1"
    
    log_info "Environment status for $env:"
    
    # Check if environment files exist
    if [ -f "FRENDE/backend/.env.$env" ]; then
        log_info "✅ Backend environment file exists"
    else
        log_warn "❌ Backend environment file missing"
    fi
    
    if [ -f "FRENDE/frontend/.env.$env" ]; then
        log_info "✅ Frontend environment file exists"
    else
        log_warn "❌ Frontend environment file missing"
    fi
    
    # Show environment configuration
    log_info "Environment configuration:"
    get_env_config "$env" | while IFS='=' read -r key value; do
        if [ -n "$key" ]; then
            log_debug "  $key=$value"
        fi
    done
}

# Clean environment files
clean_environment() {
    local env="$1"
    
    log_info "Cleaning environment files for $env..."
    
    rm -f "FRENDE/backend/.env.$env"
    rm -f "FRENDE/frontend/.env.$env"
    
    log_info "Environment files cleaned"
}

# Main function
main() {
    local action="${1:-help}"
    local environment="${2:-$DEFAULT_ENVIRONMENT}"
    
    case "$action" in
        "generate")
            validate_environment "$environment"
            generate_env_files "$environment"
            ;;
        "validate")
            validate_environment "$environment"
            validate_env_files "$environment"
            ;;
        "deploy")
            validate_environment "$environment"
            deploy_to_environment "$environment"
            ;;
        "status")
            validate_environment "$environment"
            show_environment_status "$environment"
            ;;
        "clean")
            validate_environment "$environment"
            clean_environment "$environment"
            ;;
        "help"|*)
            echo "Usage: $0 <action> [environment]"
            echo ""
            echo "Actions:"
            echo "  generate <env>  - Generate environment files"
            echo "  validate <env>  - Validate environment files"
            echo "  deploy <env>    - Deploy to environment"
            echo "  status <env>    - Show environment status"
            echo "  clean <env>     - Clean environment files"
            echo "  help            - Show this help message"
            echo ""
            echo "Environments: ${ENVIRONMENTS[*]}"
            echo "Default environment: $DEFAULT_ENVIRONMENT"
            ;;
    esac
}

# Run main function with all arguments
main "$@"
