name: Full CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check file size limits
      run: |
        echo "Checking for large files..."
        find . -type f -size +50M -not -path "./.git/*" | head -10
        
    - name: Check for sensitive data
      run: |
        echo "Checking for potential secrets..."
        grep -r -i "password\|secret\|key\|token" --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=__pycache__ . | grep -v "test\|example\|dummy" || true
        
    - name: Validate YAML files
      run: |
        echo "Validating YAML files..."
        find . -name "*.yml" -o -name "*.yaml" | xargs -I {} sh -c 'echo "Validating {}"; python -c "import yaml; yaml.safe_load(open(\"{}\"))"'

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: FRENDE/frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: FRENDE/frontend
      run: npm ci
      
    - name: Run linting
      working-directory: FRENDE/frontend
      run: npm run lint
      
    - name: Run type checking
      working-directory: FRENDE/frontend
      run: npm run type-check
      
    - name: Run unit tests
      working-directory: FRENDE/frontend
      run: npm run test:ci
      
    - name: Check test coverage
      working-directory: FRENDE/frontend
      run: |
        npm run test:coverage
        COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
        if (( $(echo "$COVERAGE < 70" | bc -l) )); then
          echo "Coverage is below 70%: $COVERAGE%"
          exit 1
        fi
        echo "Coverage is acceptable: $COVERAGE%"

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_frende
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('FRENDE/backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      working-directory: FRENDE/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        
    - name: Run linting
      working-directory: FRENDE/backend
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        black --check .
        isort --check-only .
        
    - name: Run type checking
      working-directory: FRENDE/backend
      run: mypy .
      
    - name: Run unit tests
      working-directory: FRENDE/backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_frende
        REDIS_URL: redis://localhost:6379
        JWT_SECRET_KEY: test-secret-key
        ENVIRONMENT: test
      run: |
        pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing
        
    - name: Run integration tests
      working-directory: FRENDE/backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_frende
        REDIS_URL: redis://localhost:6379
        JWT_SECRET_KEY: test-secret-key
        ENVIRONMENT: test
      run: |
        pytest tests/integration/ -v --cov=. --cov-append --cov-report=xml --cov-report=html --cov-report=term-missing
        
    - name: Run API tests
      working-directory: FRENDE/backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_frende
        REDIS_URL: redis://localhost:6379
        JWT_SECRET_KEY: test-secret-key
        ENVIRONMENT: test
      run: |
        pytest tests/test_api/ -v --cov=. --cov-append --cov-report=xml --cov-report=html --cov-report=term-missing
        
    - name: Check test coverage
      working-directory: FRENDE/backend
      run: |
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate']);")
        COVERAGE_PCT=$(echo "$COVERAGE * 100" | bc -l)
        if (( $(echo "$COVERAGE_PCT < 80" | bc -l) )); then
          echo "Coverage is below 80%: $COVERAGE_PCT%"
          exit 1
        fi
        echo "Coverage is acceptable: $COVERAGE_PCT%"

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_frende
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      working-directory: FRENDE/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        
    - name: Run security tests
      working-directory: FRENDE/backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_frende
        REDIS_URL: redis://localhost:6379
        JWT_SECRET_KEY: test-secret-key
        ENVIRONMENT: test
      run: |
        pytest tests/security/ -v --tb=short
        
    - name: Run dependency vulnerability scan
      working-directory: FRENDE/backend
      run: |
        safety check --json --output safety-report.json || true
        pip-audit --format json --output pip-audit-report.json || true
        
    - name: Run static security analysis
      working-directory: FRENDE/backend
      run: |
        bandit -r . -f json -o bandit-report.json || true
        semgrep scan --config auto --json --output semgrep-report.json || true
        
    - name: Check for critical vulnerabilities
      run: |
        python scripts/ci/check-security-alerts.py

  # Performance Tests (Lightweight)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_frende
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      working-directory: FRENDE/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        
    - name: Start backend server
      working-directory: FRENDE/backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_frende
        REDIS_URL: redis://localhost:6379
        JWT_SECRET_KEY: test-secret-key
        ENVIRONMENT: test
      run: |
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Run quick performance tests
      working-directory: FRENDE/backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_frende
        REDIS_URL: redis://localhost:6379
        JWT_SECRET_KEY: test-secret-key
        ENVIRONMENT: test
        API_BASE_URL: http://localhost:8000
      run: |
        pytest tests/performance/ -v --benchmark-only --benchmark-skip --benchmark-min-rounds=3 -k "not slow"

  # Build and Package
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, security-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: FRENDE/frontend/package-lock.json
        
    - name: Build frontend
      working-directory: FRENDE/frontend
      run: |
        npm ci
        npm run build
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Build backend
      working-directory: FRENDE/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r FRENDE/frontend/dist deployment/frontend
        cp -r FRENDE/backend deployment/backend
        cp FRENDE/backend/requirements.txt deployment/
        cp FRENDE/backend/requirements-test.txt deployment/
        tar -czf deployment-package.tar.gz deployment/
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment-package.tar.gz
        retention-days: 30

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deployment-package
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment commands here
        # This could be deploying to Vercel, Render, Railway, etc.
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here
        
    - name: Notify deployment success
      run: |
        echo "Staging deployment successful!"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deployment-package
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add actual deployment commands here
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on production..."
        # Add smoke test commands here
        
    - name: Notify deployment success
      run: |
        echo "Production deployment successful!"

  # Final Status
  pipeline-status:
    name: Pipeline Status
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, security-tests, performance-tests, build]
    if: always()
    
    steps:
    - name: Generate pipeline report
      run: |
        echo "## Pipeline Status Report" > pipeline-report.md
        echo "" >> pipeline-report.md
        echo "### Test Results" >> pipeline-report.md
        echo "- Frontend Tests: ${{ needs.frontend-tests.result }}" >> pipeline-report.md
        echo "- Backend Tests: ${{ needs.backend-tests.result }}" >> pipeline-report.md
        echo "- Security Tests: ${{ needs.security-tests.result }}" >> pipeline-report.md
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> pipeline-report.md
        echo "- Build: ${{ needs.build.result }}" >> pipeline-report.md
        echo "" >> pipeline-report.md
        echo "### Overall Status" >> pipeline-report.md
        if [[ "${{ needs.frontend-tests.result }}" == "success" && "${{ needs.backend-tests.result }}" == "success" && "${{ needs.security-tests.result }}" == "success" ]]; then
          echo "✅ All critical tests passed" >> pipeline-report.md
        else
          echo "❌ Some tests failed" >> pipeline-report.md
        fi
        
    - name: Upload pipeline report
      uses: actions/upload-artifact@v3
      with:
        name: pipeline-report
        path: pipeline-report.md
        retention-days: 7
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('pipeline-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });
