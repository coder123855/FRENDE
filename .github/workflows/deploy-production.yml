# Production Deployment Workflow
# 
# Required Repository Secrets:
# - PRODUCTION_API_URL: Production API endpoint
# - PRODUCTION_FRONTEND_URL: Production frontend URL
# - PRODUCTION_WS_URL: Production WebSocket URL
# - PRODUCTION_DATABASE_URL: Production database connection string
# - VERCEL_TOKEN: Vercel deployment token
# - VERCEL_ORG_ID: Vercel organization ID
# - VERCEL_PROJECT_ID: Vercel project ID
# - RENDER_API_KEY: Render API key
# - RENDER_PRODUCTION_SERVICE_ID: Render production service ID
# - SENTRY_DSN: Sentry DSN for error tracking
# - SENTRY_AUTH_TOKEN: Sentry authentication token
# - SENTRY_ORG: Sentry organization
# - SENTRY_PROJECT: Sentry project name

name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  pre-deployment-checks:
    name: Pre-Deployment Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for critical files
      run: |
        echo "Checking for critical configuration files..."
        test -f FRENDE/backend/.env.production || echo "Warning: Production env file not found"
        test -f FRENDE/frontend/.env.production || echo "Warning: Production env file not found"
        
    - name: Validate deployment readiness
      run: |
        echo "Validating deployment readiness..."
        # Add any additional validation checks here
        echo "‚úÖ Pre-deployment checks passed"

  deploy-frontend-production:
    name: Deploy Frontend to Production
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: FRENDE/frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: FRENDE/frontend
      run: npm ci
      
    - name: Build frontend
      working-directory: FRENDE/frontend
      env:
        VITE_API_URL: ${{ secrets.PRODUCTION_API_URL }}
        VITE_WS_URL: ${{ secrets.PRODUCTION_WS_URL }}
        VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        VITE_ENVIRONMENT: production
      run: npm run build
      
    - name: Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./FRENDE/frontend
        vercel-args: '--prod'
        
    - name: Upload source maps to Sentry
      working-directory: FRENDE/frontend
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      run: |
        npx @sentry/cli releases new production-${{ github.sha }}
        npx @sentry/cli releases files production-${{ github.sha }} upload-sourcemaps ./dist
        npx @sentry/cli releases finalize production-${{ github.sha }}

  deploy-backend-production:
    name: Deploy Backend to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, deploy-frontend-production]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      working-directory: FRENDE/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run database migrations
      working-directory: FRENDE/backend
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        ENVIRONMENT: production
      run: |
        echo "Running database migrations..."
        alembic upgrade head
        alembic current
        echo "‚úÖ Database migrations completed"
        
    - name: Deploy to Render (Production)
      run: |
        echo "Deploying to production..."
        curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"clearCache": "do_not_clear"}'
          
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 120
        
    - name: Verify deployment health
      run: |
        echo "Checking deployment health..."
        for i in {1..10}; do
          if curl -f ${{ secrets.PRODUCTION_API_URL }}/health; then
            echo "‚úÖ Health check passed"
            break
          else
            echo "Attempt $i: Health check failed, retrying..."
            sleep 30
          fi
        done
        
    - name: Create Sentry release
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      run: |
        npx @sentry/cli releases new backend-production-${{ github.sha }}
        npx @sentry/cli releases finalize backend-production-${{ github.sha }}

  production-smoke-tests:
    name: Production Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-frontend-production, deploy-backend-production]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Install Playwright
      run: npx playwright install --with-deps
      
    - name: Run production smoke tests
      env:
        PRODUCTION_FRONTEND_URL: ${{ secrets.PRODUCTION_FRONTEND_URL }}
        PRODUCTION_API_URL: ${{ secrets.PRODUCTION_API_URL }}
      run: |
        echo "Running production smoke tests..."
        
        # Test API health
        echo "Testing API health..."
        curl -f ${{ secrets.PRODUCTION_API_URL }}/health
        
        # Test frontend accessibility
        echo "Testing frontend accessibility..."
        curl -f ${{ secrets.PRODUCTION_FRONTEND_URL }}
        
        # Test critical endpoints
        echo "Testing critical endpoints..."
        curl -f ${{ secrets.PRODUCTION_API_URL }}/docs
        
        echo "‚úÖ Production smoke tests passed"
        
    - name: Notify deployment success
      run: |
        echo "üéâ Production deployment completed successfully!"
        echo "Frontend: ${{ secrets.PRODUCTION_FRONTEND_URL }}"
        echo "Backend: ${{ secrets.PRODUCTION_API_URL }}"
        echo "Release: ${{ github.sha }}"
        
    - name: Create deployment tag
      run: |
        git tag -a "v$(date +%Y%m%d-%H%M%S)" -m "Production deployment ${{ github.sha }}"
        git push origin --tags

  rollback-monitoring:
    name: Rollback Monitoring
    runs-on: ubuntu-latest
    needs: production-smoke-tests
    if: always()
    
    steps:
    - name: Check deployment status
      run: |
        if [ "${{ needs.production-smoke-tests.result }}" == "success" ]; then
          echo "‚úÖ Production deployment successful - no rollback needed"
        else
          echo "‚ùå Production deployment failed - initiating rollback procedures"
          # Add rollback logic here
          echo "Rollback procedures would be triggered here"
        fi
